#!/usr/bin/env ruby

# WARNING: Script is Linux/Cygwin-dependant

require 'fileutils'

if ARGV[0] != 'init' && ARGV[0] != 'version'
  begin
    require './nuxeo-config.rb'
  rescue LoadError
    puts "!!! WARNING: 'nuxeo-config.rb' is missing. Using default config.\n\n"
    begin
      require './nuxeo-config.default.rb'
    rescue LoadError
      puts "!!! ABORTING: Neither 'nuxeo-config.rb' nor './nuxeo-config.default.rb' was found."
      puts "Please create them by using the example below. Alternately, you can use 'ow-nuxeo init' to create a new project from scratch."
      puts ""
      puts "============="
      puts "# Nuxeo location"
      puts "#NUXEO_PATH = '/home/username/nuxeo-cap-5.6.0-tomcat/'"
      puts ""
      puts "# Distrib config"
      puts "MARKETPLACE_PACKAGE_NAME = 'my-project'"
      puts "MARKETPLACE_PROJECT_PATH = './my-project-distribution'"
      puts "============="
      
      exit 0
    end
  end
end

def nuxeoctl()
  if defined? NUXEO_PATH
    path = Dir[NUXEO_PATH + 'bin/nuxeoctl'][0]
  end
  if path == nil
    puts "ERROR, is the Nuxeo path (in 'nuxeo-config.rb') defined correctly?"
    exit 0
  else
    return path
  end
end 

def displayHelp()
  puts '> EXAMPLES'
  puts 'ow-nuxeo init'
  puts 'ow-nuxeo build'
  puts 'ow-nuxeo fastbuild deploy run'
  puts 'ow-nuxeo setversion 1.0.0'
  puts 'ow-nuxeo release'
  puts ''
  puts '> AVAILABLE GOALS / BUILD'
  puts 'build          : Full build'
  puts 'fastbuild      : Full build, but skip the tests'
  puts 'fastestbuild   : Build only the changed code, skip the tests, run offline (note: won\'t update any SNAPSHOT from remote repos, like Nuxeo Studio plugins)'
  puts 'test           : Run the Maven tests only, in debug mode'
  puts 'release        : Full build with the "release" flag enabled, to enable the use of the tagged NxStudio plugin'
  puts ''
  puts '> AVAILABLE GOALS / SERVER CONTROL'
  puts 'deploy         : Deploy the marketplace package to your instance'
  puts 'run            : Run Nuxeo in console mode'
  puts 'reset          : Resets the data of your Derby/H2 server (will only purge the binaries if you\'re using an external database)'
  puts ''
  puts '> AVAILABLE GOALS / TOOLS'
  puts 'init           : Starts a wizard to create a new Nuxeo project.'
  puts 'getversion     : Returns the current version of your project.'
  puts 'setversion [V] : Updates the project version (will be reflected on all modules of the root POM). Parameter [V] is the new version number.'
  puts 'version        : Displays ow-nuxeo version'
  puts ''
end

ARGV.each do |arg|

  case arg
 
    when 'test'
      system('mvnDebug -DforkMode=never test')
      
    when 'build'
      system('mvn clean install')
      
    when 'fastbuild'
      system('mvn clean install -DskipTests=true')
      
    when 'fastestbuild'
      system('mvn install -DskipTests=true -o')
    
    when 'getversion'
      File.open(MARKETPLACE_PROJECT_PATH + '/pom.xml') do |f|
        f.any? do |line|
          if line.include?('<version>')
            puts line.gsub(/ *<\/?version>/, '')
            break
          end
        end
      end
    
    when 'setversion'
      if !ARGV[1].nil?
        system('mvn versions:set -DnewVersion=' + ARGV[1])
        break
      else
        puts "Usage: ow-nuxeo setversion [VERSION]"
      end
    
    when 'release'
      system('mvn clean install -Drelease')
    
    when 'deploy'
      nuxeoctlPath = nuxeoctl()
      system('chmod +x ' + nuxeoctlPath)
      
      puts '> Uninstalling package "' + MARKETPLACE_PACKAGE_NAME + '"...'
      system(nuxeoctlPath + ' --accept=true --nodeps mp-remove ' + MARKETPLACE_PACKAGE_NAME)
      
      puts '', '> Installing new marketplace package...'
      system(nuxeoctlPath + ' --accept=true --nodeps mp-install ' + Dir[MARKETPLACE_PROJECT_PATH + '/target/' + MARKETPLACE_PROJECT_PATH.split('/').last + '-*.zip'][0])
     
    when 'run'
      system(nuxeoctl() + ' console')
    
    when 'reset'
      print "Delete all Nuxeo data ? (y/n, default is 'n') >> "
      case STDIN.gets.strip.downcase
        when 'y'
          if defined? NUXEO_PATH
            dataPath = NUXEO_PATH + 'nxserver/data/'
            deletePaths = Dir[dataPath + 'h2', dataPath + 'derby', dataPath + 'binaries']
          end
          if !deletePaths.nil? and deletePaths.size > 0
            puts '> Deleting Nuxeo data...'
            FileUtils.rm_r deletePaths, :force => true
            puts 'Done.'
          else
            puts 'Nothing to delete.'
          end
        else
          puts "Aborted."
      end
      
    when 'version'
      puts Gem.loaded_specs['ow-nuxeo'].full_name
      
    when 'init'
      puts "> Building archetype...\n"
      archetype_path = File.expand_path(File.dirname(__FILE__) + "/../archetype")
      FileUtils.cp_r archetype_path, "tmp_archetype"
      system("mvn clean install -f ./tmp_archetype/pom.xml")
      FileUtils.rm_r "tmp_archetype"
      
      puts "\n> Gathering project information...\n\n"
      projectInfo = {}
      
      puts "[1/3] MAVEN INFORMATION"
      puts "======================="
      while projectInfo['groupId'].to_s == ''
        print "Maven group ID (example: 'fr.openwide') >> "
        projectInfo['groupId'] = STDIN.gets.strip
      end
      while projectInfo['artifactId'].to_s == ''
        print "Maven artifact ID (example: 'my-project') >> "
        projectInfo['artifactId'] = STDIN.gets.strip
      end
      while projectInfo['name'].to_s == ''
        print "Project name (example: 'My Project') >> "
        projectInfo['name'] = STDIN.gets.strip
      end
      
      puts "\n[2/3] NUXEO INFORMATION"
      puts "======================="
      while projectInfo['nuxeoVersion'].to_s == ''
        print "Target Nuxeo version (example: '5.6') >> "
        projectInfo['nuxeoVersion'] = STDIN.gets.strip
      end
      defaultModuleId = projectInfo['groupId'] + '.' + projectInfo['artifactId']
      print "[OPTIONAL] Module ID (default is '" + defaultModuleId + "') >> "
      projectInfo['nuxeoModuleId'] = STDIN.gets.strip
      if projectInfo['nuxeoModuleId'].to_s == ''
        projectInfo['nuxeoModuleId'] = defaultModuleId
      end
      defaultVendor = projectInfo['artifactId']
      print "[OPTIONAL] Vendor (default is '" + defaultVendor + "') >> "
      projectInfo['vendor'] = STDIN.gets.strip
      if projectInfo['vendor'].to_s == ''
        projectInfo['vendor'] = defaultVendor
      end
      print "[OPTIONAL] Are you using a Nuxeo Studio project? (y/n, default is 'n') >> "
      projectInfo['hasStudioProject'] = STDIN.gets.strip.downcase
      case projectInfo['hasStudioProject']
        when 'y'
          projectInfo['hasStudioProject'] = 'true'
        else
          projectInfo['hasStudioProject'] = 'false'
      end
      if projectInfo['hasStudioProject'] == 'true'
        puts "\nPlease look at your project's settings in Studio for the following variables."
        while projectInfo['studioProjectArtifactId'].to_s == ''
          print "Studio project ID (example: 'my-project-studio') >> "
          projectInfo['studioProjectArtifactId'] = STDIN.gets.strip
        end
        while projectInfo['studioProjectGroupId'].to_s == ''
          print "Studio project group ID (example: 'nuxeo-studio') >> "
          projectInfo['studioProjectGroupId'] = STDIN.gets.strip
        end
        
        puts "\nThe following variables are used to generate a sample ~/.m2/settings.xml."
        print "[OPTIONAL] Nuxeo Connect username >> "
        projectInfo['nuxeoConnectUsername'] = STDIN.gets.strip
        if !projectInfo['nuxeoConnectUsername'].nil?
          print "[OPTIONAL] Nuxeo Connect password >> "
          projectInfo['nuxeoConnectPassword'] = STDIN.gets.strip
        end
      else
        projectInfo['nuxeoConnectUsername'] = '';
        projectInfo['nuxeoConnectPassword'] = '';
      end 
      
      puts "\n\n[3/3] OPEN-WIDE INFORMATION"
      puts "==========================="
      print "Is this an Open Wide project? (y/n, default is 'n') >> "
      projectInfo['isOpenwideProject'] = STDIN.gets.strip.downcase
      projectInfo['isOpenwideProject'] = (projectInfo['isOpenwideProject'] == 'y') ? 'true' : 'false'
      if projectInfo['isOpenwideProject'] == 'true'
        puts "\nThe following variables are used to generate a sample ~/.m2/settings.xml."
        print "[OPTIONAL] Open Wide Maven username >> "
        projectInfo['openwideRepoUsername'] = STDIN.gets.strip
        if !projectInfo['openwideRepoUsername'].nil?
          print "[OPTIONAL] Open Wide Maven password >> "
          projectInfo['openwideRepoPassword'] = STDIN.gets.strip
        end
      else
        projectInfo['openwideRepoUsername'] = '';
        projectInfo['openwideRepoPassword'] = '';
        puts "\nWARNING: The generated projects will references some 'openwide-nuxeo-commons' libraries, which are not published in Maven central yet."
        puts "You will have to download and build them from https://github.com/Open-Wide/openwide-nuxeo-commons."
        print "(press ENTER) >> "
        STDIN.gets
      end 
      
      puts "\n\nSUMMARY"
      puts "======="
      puts "Is everything correct? Press ENTER to continue, or type 'variable_name new_value' to change any value (eg. 'name my-project').\n"
      begin
        puts "------------"
        for key, value in projectInfo.each
          puts key + "=" + value.to_s
        end
        puts "------------"
        print "(press ENTER or set a variable) >> "
        confirm = STDIN.gets.strip
        if confirm.to_s != ''
          kv = confirm.split(' ')
          if !projectInfo[kv[0]].nil?
            projectInfo[kv[0]] = kv[1]
            puts "Key " + kv[0] + " updated\n"
          else
            puts "Key " + kv[0] + " doesn't exist\n"
          end
        end
      end while confirm.to_s != ''
      
      puts "\n> Generating project...\n\n"
      
      generationCommand = "mvn archetype:generate -DinteractiveMode=false -DarchetypeGroupId=fr.openwide.nuxeo -DarchetypeArtifactId=openwide-nuxeo-archetype -DarchetypeVersion=1.0.0-SNAPSHOT"
      for key, value in projectInfo.each
        generationCommand += " -D" + key + "=\"" + value.to_s + "\""
      end
      
      puts "\n" + generationCommand + "\n\n"
      
      system(generationCommand);
      
      puts "\nCOMPLETED"
      puts "========="
      puts "Please edit the Nuxeo path in 'nuxeo-config.rb', then you're ready to go."
      
    else
      displayHelp()
      
  end
  
end

if ARGV.empty?
  displayHelp()
end
